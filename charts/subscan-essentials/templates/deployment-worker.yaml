{{- $networkTypes := list "mainnet" "testnet" }}

{{- range $networkType, $networks := $.Values }}
  {{- if not (has $networkType $networkTypes)}}
    {{- continue }}
  {{- end }}
  {{- range $networkName, $networkValues := $networks }}
    {{ $networkValues := $networkValues.values }}
    {{- $networkValues = mergeOverwrite (mustDeepCopy $.Values.networkTemplate) $networkValues}}
    {{- $globalEnvVars := mustDeepCopy (ternary $.Values.testnetEnvVars $.Values.mainnetEnvVars (eq $networkType "testnet")) }}
    {{- $globalImageTag := ternary $.Values.images.backend.testnet $.Values.images.backend.mainnet (eq $networkType "testnet") }}
    {{- $networkEnvVars := mustDeepCopy (mergeOverwrite $globalEnvVars $networkValues.envVars $networkValues.worker.envVars) }}

    {{- if not (eq (get $networkEnvVars "NETWORK_NODE" ) $networkName) }}
      {{- fail (printf "The '%s' network name is inconsistent with the NETWORK_NODE environment variable, and the current value of NETWORK_NODE is '%s'." $networkName (get $networkEnvVars "NETWORK_NODE")) -}}
    {{- end }}

    {{- $imageTag := $networkValues.worker.image.tag | default $networkValues.image.tag | default $globalImageTag }}
    {{- if not $networkValues.worker.enabled }}
      {{- continue }}
    {{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: subscan-essentials-worker-{{- include "subscan-essentials.networkName" $networkName }}
  annotations:
    {{- include "subscan-essentials.backend.reload" $networkName | nindent 4 }}
  labels:
    {{- range $key, $value := $.Values.commonLabels }}
    {{ $key }}: "{{ $value | replace "{networkName}" $networkName | replace "{isMainnet}" (printf "%v" (eq $networkType "mainnet")) }}"
    {{- end }}
    component: essentials-worker
spec:
  replicas: {{ $networkValues.worker.replicaCount }}
  selector:
    matchLabels:
      {{- include "subscan-essentials.selectorLabels" $networkName | nindent 6 }}
      component: essentials-worker
  template:
    metadata:
      labels:
      {{- range $key, $value := $.Values.commonLabels }}
        {{ $key }}: "{{ $value | replace "{networkName}" $networkName | replace "{isMainnet}" (printf "%v" (eq $networkType "mainnet")) }}"
      {{- end }}
        component: essentials-worker
    spec:
      containers:
        - name: subscan-essentials-worker
          image: "{{ $.Values.images.backend.repository }}:{{ $imageTag }}"
          imagePullPolicy: IfNotPresent
          args:
            - start
            - worker
          ports:
            - name: http
              containerPort: 4399
              protocol: TCP
          envFrom:
            - secretRef:
                name: {{ include "subscan-essentials.fullname" $networkName }}-envvars
            {{- if get $networkEnvVars "envFrom" }}
              {{- get $networkEnvVars "envFrom" | toYaml | nindent 12 }}
            {{- end }}
          env:
            {{- $workerEnvVars := mergeOverwrite $networkValues.envVars $networkValues.worker.envVars }}
            {{- range $envName, $envValue := $workerEnvVars }}
            - name: {{ $envName }}
              value: {{ $envValue | toString | quote }}
            {{- end }}
          resources:
            requests:
              {{- toYaml $networkValues.worker.resources.requests | nindent 14 }}
            limits:
              cpu: {{ $networkValues.worker.resources.limits.cpu }}
  {{- end }}
{{- end }}